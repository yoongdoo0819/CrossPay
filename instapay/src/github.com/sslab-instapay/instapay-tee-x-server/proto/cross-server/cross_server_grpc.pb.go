// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cross_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Cross_ServerClient is the client API for Cross_Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Cross_ServerClient interface {
	CrossPaymentPrepared(ctx context.Context, in *CrossPaymentPrepareResMessage, opts ...grpc.CallOption) (*CrossResult, error)
	CrossPaymentCommitted(ctx context.Context, in *CrossPaymentCommitResMessage, opts ...grpc.CallOption) (*CrossResult, error)
}

type cross_ServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCross_ServerClient(cc grpc.ClientConnInterface) Cross_ServerClient {
	return &cross_ServerClient{cc}
}

func (c *cross_ServerClient) CrossPaymentPrepared(ctx context.Context, in *CrossPaymentPrepareResMessage, opts ...grpc.CallOption) (*CrossResult, error) {
	out := new(CrossResult)
	err := c.cc.Invoke(ctx, "/Cross_Server/crossPaymentPrepared", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cross_ServerClient) CrossPaymentCommitted(ctx context.Context, in *CrossPaymentCommitResMessage, opts ...grpc.CallOption) (*CrossResult, error) {
	out := new(CrossResult)
	err := c.cc.Invoke(ctx, "/Cross_Server/crossPaymentCommitted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Cross_ServerServer is the server API for Cross_Server service.
// All implementations must embed UnimplementedCross_ServerServer
// for forward compatibility
type Cross_ServerServer interface {
	CrossPaymentPrepared(context.Context, *CrossPaymentPrepareResMessage) (*CrossResult, error)
	CrossPaymentCommitted(context.Context, *CrossPaymentCommitResMessage) (*CrossResult, error)
	mustEmbedUnimplementedCross_ServerServer()
}

// UnimplementedCross_ServerServer must be embedded to have forward compatible implementations.
type UnimplementedCross_ServerServer struct {
}

func (UnimplementedCross_ServerServer) CrossPaymentPrepared(context.Context, *CrossPaymentPrepareResMessage) (*CrossResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossPaymentPrepared not implemented")
}
func (UnimplementedCross_ServerServer) CrossPaymentCommitted(context.Context, *CrossPaymentCommitResMessage) (*CrossResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossPaymentCommitted not implemented")
}
func (UnimplementedCross_ServerServer) mustEmbedUnimplementedCross_ServerServer() {}

// UnsafeCross_ServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Cross_ServerServer will
// result in compilation errors.
type UnsafeCross_ServerServer interface {
	mustEmbedUnimplementedCross_ServerServer()
}

func RegisterCross_ServerServer(s grpc.ServiceRegistrar, srv Cross_ServerServer) {
	s.RegisterService(&Cross_Server_ServiceDesc, srv)
}

func _Cross_Server_CrossPaymentPrepared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossPaymentPrepareResMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Cross_ServerServer).CrossPaymentPrepared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cross_Server/crossPaymentPrepared",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Cross_ServerServer).CrossPaymentPrepared(ctx, req.(*CrossPaymentPrepareResMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cross_Server_CrossPaymentCommitted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrossPaymentCommitResMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Cross_ServerServer).CrossPaymentCommitted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cross_Server/crossPaymentCommitted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Cross_ServerServer).CrossPaymentCommitted(ctx, req.(*CrossPaymentCommitResMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Cross_Server_ServiceDesc is the grpc.ServiceDesc for Cross_Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cross_Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cross_Server",
	HandlerType: (*Cross_ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "crossPaymentPrepared",
			Handler:    _Cross_Server_CrossPaymentPrepared_Handler,
		},
		{
			MethodName: "crossPaymentCommitted",
			Handler:    _Cross_Server_CrossPaymentCommitted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cross_server.proto",
}
